[{"content":"","date":"15 September 2023","permalink":"/projects/vulkan-renderer/","section":"","summary":"Hybrid graphics renderer made using Vulkan \u0026amp; C++","title":"Vulkan Renderer"},{"content":"","date":"15 September 2023","permalink":"/projects/software-ray-tracing/","section":"","summary":"A simple offline software ray tracer made in C++","title":"Software Ray Tracer"},{"content":"\nOverview # Space Rider is racing game made for the purpose of my Computer Graphics university module.\nThe purpose of this project was to explore different graphics ideas and techniques in OpenGL, commonly used in real-time rendering. The subjects explored in this project were as follows:\nShadow Mapping (Omni-directional/Point shadows) Multi-texturing (albedo, roughness, emissive maps) Environmental Mapping (Cubemap reflections) Instanced Rendering Bloom Vertex Displacement Animations This project was my second time using OpenGL, this time the project was focused more on working with OpenGL to achieve certain effects all in the context of building out a simple racing game. We were given a base to start from, mainly Window creation via Win32 API, font rendering via FreeType, and .obj model imports via assimp.\nBloom # One effect of note if the Bloom implementation. At first, the implementation mirrored the one listed out in LearnOpenGL. However, I was unhappy with the end result, leading to something that felt very unnatural. As I was going for a retrowave aestheic, with lots of bright neon lights, this meant a lot of the image would consist of some form of bloom and especially for big light emitters in the scene (such as the Sun), the bloom effect was not very convincing.\nSo, I did a little bit of research and came across this bloom implementation by Jorge Jimenez at SIGGRAPH 2014. In the end, after some tweaking of bloom values, the effect was much closer to what I had envisioned.\nThat is not to say I did not run into issues along the way. For example, rounding errors of image resolutions during downscaling/upscaling of the bloom image lead to an offset accumulated final bloom image.\nFinal Bloom image before composition \u0026amp; tone mapping. Finding the issue of rounding errors took some time, as I was still new to graphics development at the time, I was trying more traditional debugging techniques to solve the issue. After being unsuccessful on that front, I found out about graphics debuggers such as RenderDoc. Using this, I was very quickly able to find the issue and resolve the rounding errors in the code.\nFixed bloom image. ","date":"22 September 2023","permalink":"/projects/space-rider/","section":"","summary":"A short on-rails driving game used to explore graphics concepts.","title":"Space Rider"},{"content":" Overview # K-279 is a 1D atmospheric horror game made during the 1-Bit Game Jam.\nYou wake up in a soviet submarine in disrepair and must solve puzzles to figure out why you\u0026rsquo;re there and how to escape.\nThe team was comprised of 2D \u0026amp; 3D artists, Audio Engineers, and programmers. With this being one of the first times working on a game with artists/audio designers, I learned a lot in terms of how to communicate with teammates coming from different professions with vastly different vocabulary. When communication was troublesome at times, we found that creating a quick prototype to show instead of tell, was the most effective.\nContributions # For this game, I worked on:\nInteraction system (Doors, items) Audio Soundscape Visual Effects (Shooting, camera sway) 1-Bit Graphical Effect 1-Bit limitation # The 1-Bit restriction posed many interesting problems during development that we had not expected. For example, we used a UI fade-to-black overlay to hide the transition between rooms. However, we later realized this violated the 1-Bit challenge as the black overlay would additively combine with colors in the level to create an image that was no longer 1-bit.\nAs a result, we had to redesign that system from a UI-based fade to black, to one that was more tightly integrated into the level. We tried many solutions but in the end settled for dimming all the lights in the level to black, then returning them back to their original intensity once the level transition was finished. This solution granted us the ability to control all the lights in a room, allowing us to also play with light intensities for specific scripted sequences.\n1-Bit Dither # We decided early on that we wanted to base the game inside a submarine. We also agreed on a more atmospheric horror experience. These requirements meant that we had to focus on making the submarine levels feel lived in and immersive. At that time we were using a simple thresholding shader to achieve our 1-bit look, as the team was building out the art assets and designing the levels, we found that we were unable to reach a high enough level of detail and density in the level due to the harsh cutoffs from the thresholding effect making it difficult to discern details in and around objects.\nI spent some time researching how other games with similar 1-bit restrictions overcame these problems. I quickly came across Return of the Obra Dinn (RotOD) and was immediately hooked. Luckily, Lucas Pope, the creator of RotOD, posted a very extensive write-up on the theory behind the effect.\nFollowing in his footsteps, I managed to create a close enough approximation, but quickly ran into swimming artifacts as I was unable to fully recreate the spherical projection mapping he employed for RotOD.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Dither effect showcasing swimming artifacts. A lot of the work Lucas Pope put into his dither effect was to counteract rotational dither swimming/artifacts. However, due to the nature of our game, we were only dealing with positional camera movement on the XY plane (with very minimal rotation, reserved for elements like camera shake). With the effect done in screen space, we found that the effect still made it difficult to distinguish details in the environment.\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! 1-bit dither effect. Using Screen-space. Looking back at some of my past projects, I realized we could circumvent the swimming altogether in this project by projecting the dither pattern to world space using Tri-planar mapping.\nThe Tri-planar mapping was not as straight forward to implement as I had initially thought due to the fact that we were attempting this on a fullscreen shader. Tri-planar mapping requires world-space position and normals to work, which we don\u0026rsquo;t have access to in a fullscreen shader pass. Luckily, in recent versions of URP (10.x+), we have access to ScriptableRenderPassInput.Normal in renderer features. This adds a DepthsNormals prepass which we can then sample in our dither shader like so:\n// At the top of the pass... #include \u0026#34;Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareNormalsTexture.hlsl\u0026#34; // For SampleSceneNormals() ... // In fragment shader... // \u0026#39;ScriptableRenderPassInput.Normal\u0026#39; gives us world-space normals, // so we don\u0026#39;t need to do any space converstions. float3 normalWS = SampleSceneNormals(UV); The other piece we need is the world-space position of our fragment, which we once again don\u0026rsquo;t have in a fullscreen shader. But, we can reconstruct it from the camera depth texture like so:\n// At the top of the pass... #include \u0026#34;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl\u0026#34; // For ComputeWorldSpacePosition() #include \u0026#34;Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl\u0026#34; // For SampleSceneDepth() ... // In fragment shader... float2 UV = input.positionHCS.xy / _ScaledScreenParams.xy; // Sample the depth from the Camera depth texture. real depth = SampleSceneDepth(UV); float3 worldPos = ComputeWorldSpacePosition(UV, depth, UNITY_MATRIX_I_VP); With both these values, we can now perform tri-planar mapping like normal (pun intended) . In the end, we end up with the effect below:\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! 1-bit dither effect. Using Tri-planar projection. While this effect worked great for our purposes, there are some issues as can be seen in the animations above:\nA moiré pattern appears throughout the effect, more visible on surfaces facing perpendicular to the camera. I suspect this might be an issue with mipmapping but will have to explore this idea further. Pixel aliasing due to the small (and sometimes half-) pixels. I mitigated both of these issues by using TAA to \u0026ldquo;soak\u0026rdquo; up the moiré patterns, pixel aliasing, and half-pixel problems. TAA also had the added benefit of adding a \u0026ldquo;graininess\u0026rdquo; to the image with how it plays with the dithering effect, which suits the game\u0026rsquo;s aesthetic. While not a silver bullet to the listed problems, I am overall very pleased with the final result:\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Final 1-bit dither effect. Below are some additional captures throughout development:\n","date":"15 September 2023","permalink":"/projects/k-279/","section":"","summary":"Short atmospheric Horror game for\u003cbr\u003e\u003cstrong\u003e1-Bit Game Jam\u003c/strong\u003e","title":"K-279"},{"content":" Overview # Apocaparty is a 2D strategy-lite and time management game inspired by the likes of Diner Dash made during Summer Slow Jams 2023: Narrative.\nYou play as Cthulhu, tasked with organizing and managing Azathoth's waking up party . Keep your guests, the four horsemen of the apocalypse, happy by fulfilling all their demands before the timer runs out and Azathoth awakens.\nContributions # For this game, I was tasked with implementing the main game mechanics:\nUI Interaction \u0026amp; Controls Audio Playback AI Event Scripting Tutorial Win/Lose State I also helped develop other mechanics such as:\nDialogue System Guests # The gameplay loop focuses on constantly pressuring the player by overwhelming them with guest demands/needs. Guests can make different requests, which the player must fulfill in order to keep them happy.\nFor the guest AI, I took inspiration from Needs-Based AIs implemented in games such as The Sims. Each guest has a set of metrics (such as hunger and thirst) that continually tick down and can also be influenced by external events occurring in the game world (e.g. power outage).\nRequests can only be fulfilled by the player completing a set of actions. Instead of hardcoding these actions, I implemented a simple Action List. These action lists are integrated into the editor via a custom editor script, allowing for designers on the team to create new actions lists on the fly using predetermined building blocks.\nAction List for Drink Refills. UI # I created a UI system that allowed us to quickly spin-up UI views and link them together to create pause menus but was also used for the dialogue system\u0026rsquo;s UI to great success. The system works similar to layers in a photo manipulation software, with it keeping track of a stack of UI views it can navigate. Views have hooks for when they are popped and pushed from the stack, allowing for functionality such as transition animations.\nEvent Scripting # This was a difficult part of the project. Once we made an MVP, we quickly realized that the mechanics were too convoluted and therefore people had trouble figuring out what to do. We tackled this by stripping out a lot of mechanics and simplifying the gameplay loop to make it easier to digest. Along with that, we also decided to create a tutorial for the game to help ease players in.\nI went back and forth with the game designers a lot to decide the best ways the convey information to the player without making the tutorial too hand-holdy, as was a worry the rest of the team had from their past game jams.\nAll the tutorial scripting was done using Unity\u0026rsquo;s timeline system \u0026amp; API. Custom playables were created to facilitate the experimentation of the tutorial. Such playables included:\nControlling sprite sorting order. Controlling interactable object states. Controlling AI. Integration into the project\u0026rsquo;s dialogue system developed by fellow programmers. Text popup with animation and audio. The tutorial timeline sequence. ","date":"15 September 2023","permalink":"/projects/apocaparty/","section":"","summary":"Chaotic party planner game for\u003cbr\u003e\u003cstrong\u003eSummer Slow Jams 2023: Narrative\u003c/strong\u003e","title":"ApocaParty"},{"content":"\nOverview # ClownPanic is a 2D puzzle-horror game made during Go Godot Jam 3.\nYour computer is infected with a virus and you must try it find it on your filesystem and delete it, only this is no ordinary virus.\nThis was my first time working with Godot (v3.5 for this project). With a background primarily rooted in Unity, it was very interesting to see how the two engines differed with regards to philosophies and opinions about workflow and development. One aspect that particularly stood out to me was Godot\u0026rsquo;s embrace of a web-inspired approach to UI, which significantly streamlined the UI development process compared to Unity\u0026rsquo;s immediate-mode GUI.\nWhile we appreciated GDScript for its Python-like syntax, we encountered limitations in its flexibility when attempting to create a mini filesystem for the project. Fortunately, Godot\u0026rsquo;s support for mono allowed us to integrate a more traditional programming language, C#, for this purpose.\nContributions # For this game, I worked on:\nUI Level Progression Interaction Audio Win/Lose State Visual Effects Audio # A significant aspect of this game was to immerse players in the experience of using a computer. To achieve this goal, we meticulously replicated details like mouse clicks and keyboard presses, while also fine-tuning the audio to recreate a more expansive sound environment.\nUI # UI was another aspect we paid close attention to. We wanted to harken back to the days of Windows XP where you would find viruses on browser bars, little mascots dancing in the corner of your screen, and more malicious variants. Using many references available online, I was able to closely emulate both the visuals of the OS as well as the experience of using it.\nIn the end I ended up writing a small window manager that allows for the movement, opening and closing of windows to facilitate windows popping up to block the player\u0026rsquo;s mouse clicks, like what would have been done by viruses in that era.\nThe UI was then integrated with the mini file system that was written by my teammate to create the file explorer window in the game.\n","date":"22 September 2023","permalink":"/projects/clown-panic/","section":"","summary":"Puzzle Horror game for\u003cbr\u003e\u003cstrong\u003eGo Godot 3 Game Jam\u003c/strong\u003e","title":"Clown Panic"},{"content":"","date":"22 September 2023","permalink":"/projects/","section":"","summary":"","title":""},{"content":"","date":"22 September 2023","permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++"},{"content":"","date":"22 September 2023","permalink":"/tags/graphics/","section":"Tags","summary":"","title":"Graphics"},{"content":"","date":"22 September 2023","permalink":"/tags/opengl/","section":"Tags","summary":"","title":"OpenGL"},{"content":"","date":"22 September 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"22 September 2023","permalink":"/tags/university/","section":"Tags","summary":"","title":"University"},{"content":"I\u0026rsquo;m a Game Developer that enjoys all facets of development,\nprimarily focusing on graphics engineering and games programming.\nI have experience working at the higher-level with VFX/Shader development to lower-level work with graphics APIs such as OpenGL \u0026amp; Vulkan.\nI started off my game development journey in Unity and have since also used other engines such as Godot and more bespoke C++ engines during the course of my university degree. Currently, I am working in Unreal Engine.\n","date":"22 September 2023","permalink":"/","section":"Welcome to my Website!","summary":"I\u0026rsquo;m a Game Developer that enjoys all facets of development,","title":"Welcome to my Website!"},{"content":"","date":"22 September 2023","permalink":"/tags/c#/","section":"Tags","summary":"","title":"C#"},{"content":"","date":"22 September 2023","permalink":"/tags/game-jam/","section":"Tags","summary":"","title":"Game Jam"},{"content":"","date":"22 September 2023","permalink":"/tags/gdscript/","section":"Tags","summary":"","title":"GDScript"},{"content":"","date":"22 September 2023","permalink":"/tags/godot/","section":"Tags","summary":"","title":"Godot"},{"content":" Hey there! # I\u0026rsquo;m Emre, a Programmer that loves games and game making!\nThis website serves as a portfolio showcasing my past and ongoing work, primarily focused on Game Development. However, I occasionally delve into other topics that pique my interest.\nMy journey in programming began at the age of 15 when I was motivated to create my own games. It was during this time that my Economics teacher recognized my passion and suggested I explore the school\u0026rsquo;s Computer Science course. Funnily enough, during my final year, that same Economics teacher also became my Computer Science instructor! (small world\u0026hellip;the department was understaffed) During my Computer Science studies, I developed a fascination with low-level computing, inspired by classic games like Doom and Wolfenstein 3D—games that pushed hardware to its limits.\nMy curiosity led me into the intricate realm of shaders, graphics rendering, and GPUs. Since then, I\u0026rsquo;ve primarily worked as a generalist game developer with a focus on Graphics Engineering.\nThroughout my journey, I\u0026rsquo;ve been involved in various graphics rendering projects, both within and outside of school, and I\u0026rsquo;ve applied this knowledge to games I\u0026rsquo;ve worked on during game jams and other ventures.\n","date":"19 September 2023","permalink":"/aboutme/","section":"Welcome to my Website!","summary":"Hey there!","title":"About Me"},{"content":"","date":"15 September 2023","permalink":"/tags/gameplay/","section":"Tags","summary":"","title":"Gameplay"},{"content":"","date":"15 September 2023","permalink":"/tags/unity/","section":"Tags","summary":"","title":"Unity"},{"content":"","date":"15 September 2023","permalink":"/tags/vulkan/","section":"Tags","summary":"","title":"Vulkan"},{"content":"","date":"1 January 0001","permalink":"/posts/","section":"","summary":"","title":""},{"content":"","date":"1 January 0001","permalink":"/posts/hello/ness/","section":"","summary":"","title":""},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]